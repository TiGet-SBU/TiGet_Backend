// <auto-generated />
using System;
using Infrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.City", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Province")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d592c5fb-8a94-4bd1-8404-a07adf270c4f"),
                            CityName = "Tehran",
                            CreatedDate = new DateTime(2024, 1, 29, 1, 18, 22, 519, DateTimeKind.Local).AddTicks(1060),
                            Province = "Tehran"
                        },
                        new
                        {
                            Id = new Guid("12d95f4f-9077-4a37-b435-72cb39a57b59"),
                            CityName = "Karaj",
                            CreatedDate = new DateTime(2024, 1, 29, 1, 18, 22, 519, DateTimeKind.Local).AddTicks(1061),
                            Province = "Karaj"
                        },
                        new
                        {
                            Id = new Guid("649c0458-3bd7-4836-a95c-05bb8e3d1dd6"),
                            CityName = "Hamedan",
                            CreatedDate = new DateTime(2024, 1, 29, 1, 18, 22, 519, DateTimeKind.Local).AddTicks(1062),
                            Province = "Hamedan"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("Domain.Entities.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("576a1ee3-46e7-4449-a515-1909073f1f0c"),
                            CreatedDate = new DateTime(2024, 1, 29, 1, 18, 22, 519, DateTimeKind.Local).AddTicks(867),
                            Email = "admin@admin.com",
                            FirstName = "",
                            Gender = 0,
                            LastName = "",
                            PasswordHash = "$2a$11$.64fLerPDfuVgkHnbF3o6uBF1MGQqfxYoPivqq8HkwvevmKIbT5gy",
                            PhoneNumber = "",
                            Role = 0
                        });
                });

            modelBuilder.Entity("Domain.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("NationalId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SitPos")
                        .HasColumnType("int");

                    b.Property<Guid>("TicketId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TicketOwnerFirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TicketOwnerLastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("TicketId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Domain.Entities.Station", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("vehicleType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Stations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("086a738e-a1a5-45ca-b3f1-ac1928458500"),
                            Address = "some address",
                            CityId = new Guid("d592c5fb-8a94-4bd1-8404-a07adf270c4f"),
                            CreatedDate = new DateTime(2024, 1, 29, 1, 18, 22, 519, DateTimeKind.Local).AddTicks(1110),
                            Name = "station 1",
                            vehicleType = 0
                        },
                        new
                        {
                            Id = new Guid("a56f9fe4-4657-4115-8501-2e8e110c065a"),
                            Address = "some address",
                            CityId = new Guid("12d95f4f-9077-4a37-b435-72cb39a57b59"),
                            CreatedDate = new DateTime(2024, 1, 29, 1, 18, 22, 519, DateTimeKind.Local).AddTicks(1112),
                            Name = "station 2",
                            vehicleType = 0
                        },
                        new
                        {
                            Id = new Guid("39fa5ea6-c9b3-420a-932e-6cb4b38fc8b5"),
                            Address = "some addres",
                            CityId = new Guid("649c0458-3bd7-4836-a95c-05bb8e3d1dd6"),
                            CreatedDate = new DateTime(2024, 1, 29, 1, 18, 22, 519, DateTimeKind.Local).AddTicks(1117),
                            Name = "station 3",
                            vehicleType = 0
                        });
                });

            modelBuilder.Entity("Domain.Entities.Ticket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DestinationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("TimeToGo")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("VehicleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("DestinationId");

                    b.HasIndex("SourceId");

                    b.HasIndex("VehicleId");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("Domain.Entities.Vehicle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Vehicles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fe0a37a9-ee2e-4195-925b-327a7dafd4dd"),
                            Capacity = 30,
                            CreatedDate = new DateTime(2024, 1, 29, 1, 18, 22, 519, DateTimeKind.Local).AddTicks(1013),
                            Name = "Bus1",
                            Type = 0
                        },
                        new
                        {
                            Id = new Guid("7dd0f551-91a4-4929-896f-f42bd8095a25"),
                            Capacity = 40,
                            CreatedDate = new DateTime(2024, 1, 29, 1, 18, 22, 519, DateTimeKind.Local).AddTicks(1015),
                            Name = "Bus2",
                            Type = 0
                        },
                        new
                        {
                            Id = new Guid("ccc08e7c-2a74-4fef-9efc-0b584ae1dadf"),
                            Capacity = 20,
                            CreatedDate = new DateTime(2024, 1, 29, 1, 18, 22, 519, DateTimeKind.Local).AddTicks(1017),
                            Name = "Bus3",
                            Type = 0
                        },
                        new
                        {
                            Id = new Guid("806dc0fe-6e6a-4900-bb8d-cb583d27887e"),
                            Capacity = 70,
                            CreatedDate = new DateTime(2024, 1, 29, 1, 18, 22, 519, DateTimeKind.Local).AddTicks(1029),
                            Name = "Train1",
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("b07828fb-82f6-4aa5-9992-a48c9994b932"),
                            Capacity = 88,
                            CreatedDate = new DateTime(2024, 1, 29, 1, 18, 22, 519, DateTimeKind.Local).AddTicks(1030),
                            Name = "Train2",
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("428cc3e8-8be9-426a-999e-ce71fd29cb8f"),
                            Capacity = 50,
                            CreatedDate = new DateTime(2024, 1, 29, 1, 18, 22, 519, DateTimeKind.Local).AddTicks(1032),
                            Name = "Airplane1",
                            Type = 2
                        });
                });

            modelBuilder.Entity("Domain.Entities.Order", b =>
                {
                    b.HasOne("Domain.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Ticket", "Ticket")
                        .WithMany()
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("Domain.Entities.Station", b =>
                {
                    b.HasOne("Domain.Entities.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("Domain.Entities.Ticket", b =>
                {
                    b.HasOne("Domain.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Station", "Destination")
                        .WithMany()
                        .HasForeignKey("DestinationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Station", "Source")
                        .WithMany()
                        .HasForeignKey("SourceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Destination");

                    b.Navigation("Source");

                    b.Navigation("Vehicle");
                });
#pragma warning restore 612, 618
        }
    }
}
